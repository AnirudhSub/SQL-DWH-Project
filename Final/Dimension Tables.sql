
---------------------------------------------------CUSTOMER DIMENSION SCD2-------------------------------------------------------------
SELECT * FROM [DW].[CDW_SAPP_D_CUSTOMER]
SELECT * FROM [Staging].[S_CDW_SAPP_CUSTOMER]
DROP TABLE [DW].[CDW_SAPP_D_CUSTOMER]
exec sp_help '[Staging].[S_CDW_SAPP_CUSTOMER]';
truncate table dw.CDW_SAPP_D_CUSTOMER

SELECT * INTO [DW].[CDW_SAPP_D_CUSTOMER]
	FROM [Staging].[S_CDW_SAPP_CUSTOMER] WHERE 1=2;

DROP PROCEDURE IF EXISTS CUSTOMER_DIMENSION
CREATE PROCEDURE CUSTOMER_DIMENSION
AS 
BEGIN
	--IF NOT EXISTS [DW].[CDW_SAPP_D_CUSTOMER]
	CREATE TABLE [DW].[CDW_SAPP_D_CUSTOMER](
	CUST_ID NUMERIC IDENTITY(1,1),
	CUST_F_NAME [NVARCHAR](50) NOT NULL, 
	CUST_M_NAME [NVARCHAR](50) NOT NULL, 
	CUST_L_NAME [NVARCHAR](50) NOT NULL, 
	CUST_SSN NUMERIC NOT NULL, 
	CUST_STREET [VARCHAR](50) NOT NULL, 
	CUST_CITY [VARCHAR](50) NOT NULL, 
	CUST_STATE [VARCHAR](50) NOT NULL, 
	CUST_COUNTRY [VARCHAR](50) NOT NULL,  
	CUST_ZIP NUMERIC NOT NULL,
	CUST_PHONE [VARCHAR](50) NOT NULL,
	CUST_EMAIL [VARCHAR](50) NOT NULL,
	LOADING_DATE DATETIME NOT NULL,
	SOURCE_DATA [VARCHAR](50) NOT NULL,
	CREATED_DATE DATETIME NOT NULL,
	END_DATE DATETIME NULL)
 
	INSERT INTO [DW].[CDW_SAPP_D_CUSTOMER]
	(CUST_F_NAME,CUST_M_NAME,CUST_L_NAME,CUST_SSN,CUST_STREET,CUST_CITY,
	CUST_STATE,CUST_COUNTRY,CUST_ZIP,CUST_PHONE,CUST_EMAIL,LOADING_DATE,SOURCE_DATA,CREATED_DATE,END_DATE)
	
	SELECT CUST_F_NAME,CUST_M_NAME,CUST_L_NAME,CUST_SSN,CUST_STREET,CUST_CITY,
	CUST_STATE,CUST_COUNTRY,CUST_ZIP,CUST_PHONE,CUST_EMAIL,LOADING_DATE,SOURCE_DATA,CURRENT_TIMESTAMP,NULL 
	FROM (
	MERGE [DW].[CDW_SAPP_D_CUSTOMER] AS TRG
	USING [Staging].[S_CDW_SAPP_CUSTOMER] AS SRC
	ON TRG.CUST_ID = SRC.CUST_ID

	WHEN NOT MATCHED 
	THEN
	INSERT (CUST_F_NAME,CUST_M_NAME,CUST_L_NAME,CUST_SSN,CUST_STREET,CUST_CITY,
	CUST_STATE,CUST_COUNTRY,CUST_ZIP,CUST_PHONE,CUST_EMAIL,LOADING_DATE,SOURCE_DATA,CREATED_DATE)
	VALUES (SRC.CUST_F_NAME, SRC.CUST_M_NAME, SRC.CUST_L_NAME, SRC.CUST_SSN, SRC.CUST_STREET, SRC.CUST_CITY,
	SRC.CUST_STATE, SRC.CUST_COUNTRY, SRC.CUST_ZIP, SRC.CUST_PHONE, SRC.CUST_EMAIL, SRC.LOADING_DATE, SRC.SOURCE_DATA, Current_Timestamp)
	
	WHEN MATCHED 
	AND(
	TRG.CUST_ID != SRC.CUST_ID OR
	TRG.CUST_F_NAME != SRC.CUST_F_NAME OR
	TRG.CUST_M_NAME != SRC.CUST_M_NAME OR
	TRG.CUST_L_NAME != SRC.CUST_L_NAME OR
	TRG.CUST_SSN != SRC.CUST_SSN OR
	TRG.CUST_STREET != SRC.CUST_STREET OR
	TRG.CUST_CITY != SRC.CUST_CITY OR
	TRG.CUST_STATE != SRC.CUST_STATE OR
	TRG.CUST_COUNTRY != SRC.CUST_COUNTRY OR
	TRG.CUST_ZIP != SRC.CUST_ZIP OR 
	TRG.CUST_PHONE != SRC.CUST_PHONE OR 
	TRG.CUST_EMAIL != SRC.CUST_EMAIL OR 
	TRG.CUST_EMAIL != SRC.CUST_EMAIL OR 
	TRG.LOADING_DATE != SRC.LOADING_DATE OR 
	TRG.SOURCE_DATA != SRC.SOURCE_DATA)
	THEN UPDATE
	SET TRG.END_DATE=CURRENT_TIMESTAMP
	OUTPUT SRC.CUST_ID, SRC.CUST_F_NAME, SRC.CUST_M_NAME, SRC.CUST_L_NAME, SRC.CUST_SSN, SRC.CUST_STREET, SRC.CUST_CITY,
	SRC.CUST_STATE, SRC.CUST_COUNTRY, SRC.CUST_ZIP, SRC.CUST_PHONE, SRC.CUST_EMAIL, SRC.LOADING_DATE, SRC.SOURCE_DATA,
	$ACTION AS MERGEACTION) AS MRG
	where MRG.MERGEACTION = 'UPDATE';
END;

EXEC CUSTOMER_DIMENSION

---------------------------------------------------SUPPLIER DIMENSION-------------------------------------------------------------
SELECT * FROM [DW].[CDW_SAPP_D_SUPPLIER]
DROP TABLE [DW].[CDW_SAPP_D_SUPPLIER]
SELECT * FROM [Staging].[S_CDW_SAPP_SUPPLIER]

SELECT * INTO [DW].[CDW_SAPP_D_SUPPLIER]
	FROM [Staging].[S_CDW_SAPP_SUPPLIER] WHERE 1=2;

DROP PROCEDURE IF EXISTS SUPPLIER_DIMENSION
CREATE PROCEDURE SUPPLIER_DIMENSION
AS BEGIN
	DROP TABLE IF EXISTS [DW].[CDW_SAPP_D_SUPPLIER]
	SELECT * INTO [DW].[CDW_SAPP_D_SUPPLIER]
	FROM [Staging].[S_CDW_SAPP_SUPPLIER] WHERE 1=2;

	MERGE INTO [DW].[CDW_SAPP_D_SUPPLIER] TRG
	USING [Staging].[S_CDW_SAPP_SUPPLIER] SRC ON 
	TRG.SUPPLIER_ID = SRC.SUPPLIER_ID

	WHEN NOT MATCHED 
	THEN INSERT (SUPPLIER_ID, SUPPLIER_NAME, SUPPLIER_SSN, SUPPLIER_PHONE, SUPPLIER_LOC, LOADING_DATE, SOURCE_DATA)
	VALUES (SRC.SUPPLIER_ID,SRC.SUPPLIER_NAME, SRC.SUPPLIER_SSN, SRC.SUPPLIER_PHONE, SRC.SUPPLIER_LOC,
	SRC.LOADING_DATE, SRC.SOURCE_DATA)

	WHEN MATCHED AND(
	TRG.SUPPLIER_ID != SRC.SUPPLIER_ID OR 
	TRG.SUPPLIER_NAME != SRC.SUPPLIER_NAME OR 
	TRG.SUPPLIER_SSN != SRC.SUPPLIER_SSN OR
	TRG.SUPPLIER_PHONE != SRC.SUPPLIER_PHONE OR 
	TRG.SUPPLIER_LOC != SRC.SUPPLIER_LOC OR
	TRG.LOADING_DATE != SRC.LOADING_DATE OR
	TRG.SOURCE_DATA != SRC.SOURCE_DATA)
	THEN UPDATE SET 
	TRG.SUPPLIER_ID = SRC.SUPPLIER_ID,
	TRG.SUPPLIER_NAME = SRC.SUPPLIER_NAME,  
	TRG.SUPPLIER_SSN = SRC.SUPPLIER_SSN, 
	TRG.SUPPLIER_PHONE = SRC.SUPPLIER_PHONE,  
	TRG.SUPPLIER_LOC = SRC.SUPPLIER_LOC,
	TRG.LOADING_DATE = SRC.LOADING_DATE, 
	TRG.SOURCE_DATA = SRC.SOURCE_DATA;
END;
EXEC SUPPLIER_DIMENSION 

---------------------------------------------------PRODUCT DIMENSION-------------------------------------------------------------

exec sp_help 'Staging.S_CDW_SAPP_PRODUCT';
  
select * from [DW].[CDW_SAPP_D_PRODUCT];
 
select * from Staging.S_CDW_SAPP_PRODUCT;
 
DROP TABLE IF EXISTS [DW].[CDW_SAPP_D_PRODUCT];
DROP PROCEDURE IF EXISTS PRODUCT_DIMENSION;
create procedure PRODUCT_DIMENSION
as 
begin
	IF OBJECT_ID(N'[DW].[CDW_SAPP_D_PRODUCT]' , N'U') IS NULL
	BEGIN
	CREATE TABLE [DW].[CDW_SAPP_D_PRODUCT](
	PRODUCT_CODE BIGINT,
	PRODUCT_NAME nvarchar(50),
	SUPPLIER_ID int,
	PRICE nvarchar(50),
	LOADING_DATE datetime,
	SOURCE_DATA varchar(max));
	END

	merge into [DW].[CDW_SAPP_D_PRODUCT] dp 
	using
	[Staging].[S_CDW_SAPP_PRODUCT] p
	on 
	dp.PRODUCT_CODE = p.PRODUCT_CODE
	when matched and
	(
	dp.PRODUCT_NAME != p.PRODUCT_NAME OR
	dp.SUPPLIER_ID != p.SUPPLIER_ID OR
	dp.PRICE != p.PRODUCT_PRICE or
	dp.LOADING_DATE != p.LOADING_DATE OR
	dp.SOURCE_DATA != p.SOURCE_DATA
	)
	THEN 
	update set
	dp.PRODUCT_NAME = p.PRODUCT_NAME ,
	dp.SUPPLIER_ID = p.SUPPLIER_ID ,
	dp.PRICE = p.PRODUCT_PRICE,
	dp.LOADING_DATE = p.LOADING_DATE,
	dp.SOURCE_DATA = p.SOURCE_DATA
 
	WHEN not matched
	THEN insert (PRODUCT_CODE, PRODUCT_NAME, SUPPLIER_ID, PRICE, LOADING_DATE, SOURCE_DATA)
	values
	(p.PRODUCT_CODE, p.PRODUCT_NAME, p.SUPPLIER_ID, p.PRODUCT_PRICE, P.LOADING_DATE, p.SOURCE_DATA);
END;
 
EXEC PRODUCT_DIMENSION
EXEC PRODUCT_DIMENSION

----------------------------------------------------------TIME DIMENSION-------------------------------------------------------------
DROP PROCEDURE IF EXISTS TIME_DIMENSION
create procedure TIME_DIMENSION
as
begin
	DROP TABLE IF EXISTS [DW].[CDW_SAPP_D_TIME]
	CREATE TABLE [DW].[CDW_SAPP_D_TIME](
	TIMEID Varchar(MAX),
	DAY NUMERIC,
	MONTH NUMERIC,
	QUARTER NUMERIC,
	YEAR NUMERIC,
	LOADING_DATE DATETIME,
	SOURCE_DATA VARCHAR(50))
	merge [DW].[CDW_SAPP_D_TIME] as Target
	using [Staging].[S_CDW_SAPP_D_TIME] as source
	on Target.TIMEID = source.TIMEID
	when matched AND(
		Target.TIMEID != Source.TIMEID OR 
		Target.DAY != Source.DAY OR
		Target.MONTH != Source.MONTH OR
		Target.QUARTER != Source.QUARTER OR
		Target.YEAR != Source.YEAR OR
		Target.LOADING_DATE != Source.LOADING_DATE OR 
		Target.SOURCE_DATA != Source.SOURCE_DATA)
	THEN UPDATE SET 
		Target.TIMEID = Source.TIMEID, 
		Target.DAY = Source.DAY,
		Target.MONTH = Source.MONTH,
		Target.QUARTER = Source.QUARTER,
		Target.YEAR = Source.YEAR,
		Target.LOADING_DATE = Source.LOADING_DATE,  
		Target.SOURCE_DATA = Source.SOURCE_DATA
	when not matched then 
		insert values(source.TIMEID, source.DAY , source.MONTH, source.QUARTER, source.YEAR , source.LOADING_DATE , source.SOURCE_DATA);
end;

exec TIME_DIMENSION

SELECT * FROM [DW].[CDW_SAPP_D_TIME]

exec sp_help '[Staging].[S_CDW_SAPP_BRANCH]';


----------------------------------------------------------BRANCH DIMENSION-------------------------------------------------------------
DROP PROCEDURE IF EXISTS BRANCH_DIMENSION
CREATE PROCEDURE BRANCH_DIMENSION
AS BEGIN
	DROP TABLE IF EXISTS [DW].[CDW_SAPP_D_BRANCH]
	CREATE TABLE [DW].[CDW_SAPP_D_BRANCH](
	BRANCH_CODE INT,
	BRANCH_NAME NVARCHAR(50),
	BRANCH_STREET NVARCHAR(50),
	BRANCH_CITY NVARCHAR(50),
	BRANCH_STATE NVARCHAR(50),
	BRANCH_ZIP INT,
	BRANCH_PHONE NVARCHAR(50),
	LOADING_DATE DATETIME,
	SOURCE_DATA VARCHAR(50))
	MERGE INTO [DW].[CDW_SAPP_D_BRANCH] TRG 
	USING [Staging].[S_CDW_SAPP_BRANCH] SRC 
	ON TRG.BRANCH_CODE = SRC.BRANCH_CODE
	
	WHEN NOT MATCHED 
	THEN INSERT ( 
	BRANCH_CODE, BRANCH_NAME, BRANCH_STREET, BRANCH_CITY, BRANCH_STATE, BRANCH_ZIP, BRANCH_PHONE, 
	LOADING_DATE, SOURCE_DATA )
	VALUES (SRC.BRANCH_CODE, SRC.BRANCH_NAME, SRC.BRANCH_STREET, SRC.BRANCH_CITY, SRC.BRANCH_STATE,
	SRC.BRANCH_ZIP, SRC.BRANCH_PHONE, SRC.LOADING_DATE, SRC.SOURCE_DATA)
	
	WHEN MATCHED AND (
	TRG.BRANCH_CODE != SRC.BRANCH_CODE OR TRG.BRANCH_NAME != SRC.BRANCH_NAME OR
	TRG.BRANCH_STREET != SRC.BRANCH_STREET OR TRG.BRANCH_STATE != SRC.BRANCH_STATE OR
	TRG.BRANCH_ZIP != SRC.BRANCH_ZIP OR TRG.BRANCH_PHONE!= SRC.BRANCH_PHONE 
	OR TRG.LOADING_DATE != SRC.LOADING_DATE OR TRG.SOURCE_DATA != SRC.SOURCE_DATA )
	
	THEN UPDATE SET
	TRG.[BRANCH_CODE] = SRC.BRANCH_CODE, TRG.BRANCH_NAME = SRC.BRANCH_NAME, 
	TRG.BRANCH_STREET = SRC.BRANCH_STREET, TRG.BRANCH_CITY = SRC.BRANCH_CITY, 
	TRG.BRANCH_STATE = SRC.BRANCH_STATE, TRG.BRANCH_ZIP = SRC.BRANCH_ZIP, 
	TRG.BRANCH_PHONE = SRC.BRANCH_PHONE, TRG.LOADING_DATE = SRC.LOADING_DATE, 
	TRG.SOURCE_DATA = SRC.SOURCE_DATA;
END;

SELECT * FROM [DW].[CDW_SAPP_D_BRANCH]
EXEC BRANCH_DIMENSION

------------------------------------------------------SALES STAGING TABLE------------------------------------------------------------------------
DROP PROCEDURE IF EXISTS STAGING_SALES
CREATE PROCEDURE STAGING_SALES
AS
BEGIN
	DROP TABLE IF EXISTS [Staging].[CDW_SAPP_STG_SALES]
	SELECT 
	CAST(ROW_NUMBER() OVER(ORDER BY (SELECT NULL)) AS NUMERIC) AS CDW_SALES_DSET_KEY, 
	MS.DAY AS SALES_F_PERIOD_KEY_DAY, 
	MS.MONTH AS SALES_F_PERIOD_KEY_MONTH, 
	MS.YEAR AS SALES_F_PERIOD_KEY_YEAR,
	C.CUST_SSN AS SALES_F_CUSTOMER_KEY,
	S.SUPPLIER_SSN AS SALES_F_SUPPLIER_KEY, 
	BR.BRANCH_CODE AS SALES_F_BRANCH_CODE, 
	BR.BRANCH_NAME AS SALES_F_BRANCH_NAME, 
	CAST(P.PRODUCT_CODE AS NUMERIC) AS SALES_F_PRODUCT_CODE, 
	P.PRODUCT_NAME AS SALES_F_PRODUCT_NAME, 
	MS.QUANTITY_SOLD AS SALES_SOLD_QTY, 
	SUM(CAST(MS.QUANTITY_SOLD AS DECIMAL(18,2)) * CAST(P.PRICE AS DECIMAL(18,2))) AS SALES_TOTAL_AMOUNT,
	GETDATE() AS CREATED_DATE
	INTO [Staging].[CDW_SAPP_STG_SALES]
	FROM [DW].[CDW_SAPP_D_PRODUCT] P
	JOIN
	[DW].[CDW_SAPP_D_SUPPLIER] S
	ON 
	P.SUPPLIER_ID = S.SUPPLIER_ID
	JOIN
	[Landing].[U_CDW_SAPP_F_SALES] MS
	ON
	S.SUPPLIER_SSN = MS.SUPPLIER_SSN
	JOIN
	[DW].[CDW_SAPP_D_BRANCH] BR 
	ON 
	BR.BRANCH_NAME = MS.BRANCH_NAME
	JOIN
	[DW].[CDW_SAPP_D_CUSTOMER] C
	ON 
	C.CUST_STATE = BR.BRANCH_STATE
	GROUP BY MS.DAY, ms.MONTH, ms.YEAR, C.CUST_SSN, S.SUPPLIER_SSN, P.PRODUCT_NAME, BR.BRANCH_NAME, MS.SUPPLIER_SSN, MS.PRODUCT_NAME,
	MS.BRANCH_NAME, MS.QUANTITY_SOLD, BR.BRANCH_CODE, P.PRODUCT_CODE;
END;
EXEC STAGING_SALES